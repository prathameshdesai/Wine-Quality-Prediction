k_in_knn <- strtoi(k_in_knn[1])
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_knn(trainingdata,testingdata,k_in_knn)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}
}
Final_Data_Frame <- setNames(Final_Data_Frame, c('Predicted_Values', 'True_Values'))
print(Final_Data_Frame)
return (Final_Data_Frame)
}
results <- do_cv_class(wines[,], 10,'logreg')
library(ggplot2)
library(plyr)
library(knitr)
library(e1071)
library(caret)
library(class)
set.seed(111)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
library(ggplot2)
library(plyr)
library(knitr)
library(e1071)
library(caret)
library(class)
set.seed(111)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
wines <- read.csv("./white_wine.csv", header = TRUE)
get_pred_logreg <- function(train, test) {
class_vector <- train[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
glm.fit <- glm(out~., family=binomial(link='logit'), data=train)
result_predict <- predict(glm.fit, test, type= "response")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
get_pred_logreg (wines[1:330,1:5],wines[331:363,1:5])
get_pred_logreg <- function(train, test) {
class_vector <- train[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
glm.fit <- glm(out~., family=binomial(link='logit'), data=train)
result_predict <- predict(glm.fit, test, type= "response")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
# get_pred_logreg (wines[1:330,1:5],wines[331:363,1:5])
get_pred_nb <- function(train, test) {
class_vector <- train[,5]
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("low", "high")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
nb <- naiveBayes(out~., data=train)
result_predict <- predict(nb, test, type="raw")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
get_pred_knn <- function(train, test, k) {
df_trn <- data.frame(train[,1:length(train)-1])
df_test <- data.frame(test[,1:length(train)-1])
class_label <- train[,length(train)]
result <- knn(train = df_trn,
test = df_test,
cl = class_label,
k = k
)
# print(result)
return(result)
}
do_cv_class <- function(df, num_folds, model_name) {
class_vector <- df[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(df)[5] <- c("out")
df["out"] <- factor_class_vector
K <- num_folds
Final_Data_Frame <-  NULL
#Split the rows into into K parts
splits  <- split(df, f = rep_len(sample(seq(1,K), K), nrow(df)))
#Iterate over K and test on 1 to K chunks of data
for(i in 1:K){
test <- splits[[i]]
test_vector <- NULL
test_vector <-  c(strtoi(row.names(test)))
if(model_name == 'logreg'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_logreg(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else if(model_name == 'nb'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_nb(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else{
k_in_knn <-  strsplit(model_name,"nn")[[1]]
k_in_knn <- strtoi(k_in_knn[1])
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_knn(trainingdata,testingdata,k_in_knn)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}
}
Final_Data_Frame <- setNames(Final_Data_Frame, c('Predicted_Values', 'True_Values'))
print(Final_Data_Frame)
return (Final_Data_Frame)
}
results <- do_cv_class(wines[,], 10,'logreg')
results
results <- do_cv_class(wines[,], 10,'logreg')
results
get_metrics <- function(results, cutoff = 0.5) {
if(results$Predicted_Values > cutoff){
results$Predicted_Values <- 1
}else{
results$Predicted_Values <- 0
}
}
get_metrics(results,cutoff = 0.5)
results
cutoff = 0.5
if(results$Predicted_Values > cutoff){
results$Predicted_Values <- 1
}else{
results$Predicted_Values <- 0
}
if(results["Predicted_Values" > cutoff]){
results["Predicted_Values"] <- 1
}else{
results["Predicted_Values"] <- 0
}
results["Predicted_Values"] <- 0
results["Predicted_Values" > cutoff] = 1
results
results <- do_cv_class(wines[,], 10,'logreg')
library(ggplot2)
library(plyr)
library(knitr)
library(e1071)
library(caret)
library(class)
set.seed(100)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
wines <- read.csv("./white_wine.csv", header = TRUE)
get_pred_logreg <- function(train, test) {
class_vector <- train[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
glm.fit <- glm(out~., family=binomial(link='logit'), data=train)
result_predict <- predict(glm.fit, test, type= "response")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
# get_pred_logreg (wines[1:330,1:5],wines[331:363,1:5])
get_pred_nb <- function(train, test) {
class_vector <- train[,5]
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("low", "high")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
nb <- naiveBayes(out~., data=train)
result_predict <- predict(nb, test, type="raw")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
get_pred_knn <- function(train, test, k) {
df_trn <- data.frame(train[,1:length(train)-1])
df_test <- data.frame(test[,1:length(train)-1])
class_label <- train[,length(train)]
result <- knn(train = df_trn,
test = df_test,
cl = class_label,
k = k
)
# print(result)
return(result)
}
do_cv_class <- function(df, num_folds, model_name) {
class_vector <- df[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(df)[5] <- c("out")
df["out"] <- factor_class_vector
K <- num_folds
Final_Data_Frame <-  NULL
#Split the rows into into K parts
splits  <- split(df, f = rep_len(sample(seq(1,K), K), nrow(df)))
#Iterate over K and test on 1 to K chunks of data
for(i in 1:K){
test <- splits[[i]]
test_vector <- NULL
test_vector <-  c(strtoi(row.names(test)))
if(model_name == 'logreg'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_logreg(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else if(model_name == 'nb'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_nb(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else{
k_in_knn <-  strsplit(model_name,"nn")[[1]]
k_in_knn <- strtoi(k_in_knn[1])
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_knn(trainingdata,testingdata,k_in_knn)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}
}
Final_Data_Frame <- setNames(Final_Data_Frame, c('Predicted_Values', 'True_Values'))
print(Final_Data_Frame)
return (Final_Data_Frame)
}
results <- do_cv_class(wines[,], 10,'logreg')
results
get_metrics <- function(results, cutoff = 0.5) {
results["Predicted_Values"] <- 0
results["Predicted_Values" > cutoff] = 1
}
get_metrics(results,cutoff = 0.5)
results
results <- do_cv_class(wines[,], 10,'logreg')
cutoff = 0.5
results["Predicted_Values" > cutoff] = 1
results
results <- do_cv_class(wines[,], 10,'logreg')
results <- do_cv_class(wines[,], 10,'logreg')
cutoff
results["Predicted_Values" < cutoff] = 0
results
results("Predicted_Values" < cutoff) = 0
results <- do_cv_class(wines[,], 10,'logreg')
results[results["Predicted_Values" < cutoff]] = 0
results[results["Predicted_Values" > cutoff]] = 1
results[results["Predicted_Values" < cutoff]] = 0
results
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values" < cutoff]] = 0
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 1
results
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 1
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 0
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results
library(ggplot2)
library(plyr)
library(knitr)
library(e1071)
library(caret)
library(class)
set.seed(100)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
wines <- read.csv("./white_wine.csv", header = TRUE)
get_pred_logreg <- function(train, test) {
class_vector <- train[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
glm.fit <- glm(out~., family=binomial(link='logit'), data=train)
result_predict <- predict(glm.fit, test, type= "response")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
# get_pred_logreg (wines[1:330,1:5],wines[331:363,1:5])
get_pred_nb <- function(train, test) {
class_vector <- train[,5]
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("low", "high")
colnames(train)[5] <- c("out")
train["out"] <- factor_class_vector
nb <- naiveBayes(out~., data=train)
result_predict <- predict(nb, test, type="raw")
df <- data.frame(result_predict,test[,5])
print(df)
return(df)
}
get_pred_knn <- function(train, test, k) {
df_trn <- data.frame(train[,1:length(train)-1])
df_test <- data.frame(test[,1:length(train)-1])
class_label <- train[,length(train)]
result <- knn(train = df_trn,
test = df_test,
cl = class_label,
k = k
)
# print(result)
return(result)
}
do_cv_class <- function(df, num_folds, model_name) {
class_vector <- df[,5]
levels(class_vector) = c("low", "high")
factor_class_vector <- as.factor(class_vector)
levels(factor_class_vector) <- c("0","1")
colnames(df)[5] <- c("out")
df["out"] <- factor_class_vector
K <- num_folds
Final_Data_Frame <-  NULL
#Split the rows into into K parts
splits  <- split(df, f = rep_len(sample(seq(1,K), K), nrow(df)))
#Iterate over K and test on 1 to K chunks of data
for(i in 1:K){
test <- splits[[i]]
test_vector <- NULL
test_vector <-  c(strtoi(row.names(test)))
if(model_name == 'logreg'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_logreg(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else if(model_name == 'nb'){
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_nb(trainingdata,testingdata)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}else{
k_in_knn <-  strsplit(model_name,"nn")[[1]]
k_in_knn <- strtoi(k_in_knn[1])
trainingdata <- df[-test_vector,]
testingdata <-  df[test_vector,]
temp_Frame <- get_pred_knn(trainingdata,testingdata,k_in_knn)
Final_Data_Frame <- rbind(Final_Data_Frame, temp_Frame)
}
}
Final_Data_Frame <- setNames(Final_Data_Frame, c('Predicted_Values', 'True_Values'))
print(Final_Data_Frame)
return (Final_Data_Frame)
}
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 1
cutoff <- 0.5
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 1
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 0
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 1
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 1
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 0
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 1
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 0
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values = 0
results
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 0
results
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] < cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] > 0] = 1
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] > cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] > 0] = 1
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] > 0] = 1
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = 0
results$Predicted_Values[results["Predicted_Values"] > 0] = 1
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] > 0] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] != "Low"] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[results["True_Values"] = 0] = "Low"
results$True_Values[results["True_Values"] = 1] = "High"
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[results["True_Values"] == 0] = "Low"
results$True_Values[results["True_Values"] == 1] = "High"
results
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[strtoi(results["True_Values"]) == 0] = "Low"
results$True_Values[strtoi(results["True_Values"]) == 1] = "High"
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[results["True_Values"] != 1] = "Low"
results$True_Values[results["True_Values"] != 0] = "High"
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[results["True_Values"] = 0] = "Low"
class(results$True_Values)
results$True_Values
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values[results["True_Values"] = 0] = "Low"
class(results$Predicted_Values)
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(results$True_Values)
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(results$True_Values)
results$True_Values[results["True_Values"] = 2] = "High"
results$True_Values[results["True_Values"] == 2] = "High"
results$True_Values[results["True_Values"] != 1] = "High"
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(results$True_Values)
class(results$True_Values)
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(levels(results$True_Values))[results$True_Values]
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(levels(results$True_Values))[results$True_Values]
results <- do_cv_class(wines[,], 10,'logreg')
as.numeric(levels(results$True_Values))[results$True_Values]
results$True_Values[results["True_Values"] != 1] = "Low"
results$True_Values[results["True_Values"] != 0] = "High"
get_metrics <- function(results, cutoff = 0.5) {
# results$Predicted_Values = 0
results$True_Values <- as.numeric(levels(results$True_Values))[results$True_Values]
results$True_Values[results["True_Values"] != 1] = "Low"
results$True_Values[results["True_Values"] != 0] = "High"
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] != "Low"] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
}
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values <- as.numeric(levels(results$True_Values))[results$True_Values]
results$True_Values[results["True_Values"] != 1] = "Low"
results$True_Values[results["True_Values"] != 0] = "High"
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] != "Low"] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
results <- do_cv_class(wines[,], 10,'logreg')
results$True_Values <- as.numeric(levels(results$True_Values))[results$True_Values]
results$True_Values
results$True_Values[results["True_Values"] == 0] = "Low"
results$True_Values[results["True_Values"] == 1] = "High"
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] != "Low"] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
tbl
tbl[1]
tbl[1,2]
tbl[2]
results <- do_cv_class(wines[,], 10,'logreg')
#results
get_metrics <- function(results, cutoff = 0.5) {
# results$Predicted_Values = 0
results$True_Values <- as.numeric(levels(results$True_Values))[results$True_Values]
results$True_Values[results["True_Values"] == 0] = "Low"
results$True_Values[results["True_Values"] == 1] = "High"
results$Predicted_Values[results["Predicted_Values"] <= cutoff] = "Low"
results$Predicted_Values[results["Predicted_Values"] != "Low"] = "High"
tbl <- table(results$Predicted_Values,results$True_Values)
TP <- tbl[1,1]
FP <- tbl[1,2]
FN <- tbl[2,1]
TN <- tbl[2,2]
accuracy <- (TP + TN)/(TP + FP + FN + TN)
precision <- (TP)/(TP + FP)
recall <- (TP)/(TP + FN)
FPR <- (FP)/(FP + TN)
performance <- data.frame(accuracy,precision,recall,FPR)
print(performance)
return(performance)
}
get_metrics(results,cutoff = 0.5)
